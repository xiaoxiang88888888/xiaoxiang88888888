<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"
       default-autowire="byName">
    <bean id="propertyConfigurer1" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          lazy-init="false">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:common.properties</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
          <property name="driverClassName" value="${jdbc.driverClassName}" />
          <property name="url" value="${jdbc.url}" />
          <property name="username" value="${jdbc.username}" />
          <property name="password" value="${jdbc.password}" />
          <property name="minIdle" value="${jdbc.minIdle}" />
          <property name="maxIdle" value="${jdbc.maxIdle}" />
          <property name="maxActive" value="${jdbc.maxActive}" />
          <property name="maxWait" value="${jdbc.maxWait}" />
          <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
          <property name="testOnReturn" value="${jdbc.testOnReturn}" />
          <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
          <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
          <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
          <!--生产环境需要去掉-->
        <!-- <property name="validationQuery" value="${jdbc.validationQuery}" />-->
    </bean>

    <!-- iBatis SQL map定义 -->
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        
        <property name="configLocation" value="classpath:ibatis/sqlmap-config.xml"/>
    </bean>

    <bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
        <property name="sqlMapClient" ref="sqlMapClient"/>
    </bean>

    <!--抽象dao层-->
    <bean id="baseDAO" abstract="true">
        <property name="sqlMapClientTemplate">
            <ref local="sqlMapClientTemplate"/>
        </property>
    </bean>

    <!--事务相关-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--抽象service层,主要加入事务控制-->
      <!--Base TransactionProxyed Service Bean 给声明的方法(通过spring aop) ，动态加入事务管理，使得数据真正保存在数据库 注意，
      需声明为抽象，用于继承，如在需要的bean声明中加入parent="baseService"-->
    <bean id="baseService"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
          abstract="true">
        <property name="transactionManager">
            <ref bean="transactionManager"/>
        </property>
		<!--有异常也回滚-->
        <property name="transactionAttributes">
            <props>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
    </bean>

    <!--抽象action层,主要注入一些常量-->
    <bean id="baseAction" abstract="true">
        <!-- 静态资源版本号 -->
        <property name="staticVersion" value="${server.static.version}"/>
    </bean>


    <bean id="springContextUtil" class="com.xiaoxiang.util.SpringContextUtil" scope="singleton"/>

    <!--配置信息  -->
    <bean id="commonProp"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:common.properties"/>
    </bean>
</beans>
