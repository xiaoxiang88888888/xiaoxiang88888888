<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 自动扫描bean，把作了注解的类转换为bean 最好分模块加载,见import-->
    <!--<context:component-scan base-package="com.xiaoxiang.area"/>-->

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <!--<mvc:annotation-driven /> 是一种简写形式，完全可以手动配置替代这种简写形式，
    简写形式可以让初学都快速应用默认配置方案。<mvc:annotation-driven />
    会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,
    是spring MVC为@Controllers分发请求所必须的。
     并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，
     读写XML的支持（JAXB），读写JSON的支持（Jackson）-->
    <mvc:annotation-driven/>

    <!-- 拦截器 -->
    <!--我们可以配置多个HandlerMapping。<mvc:interceptors/>会为每一个HandlerMapping，
    注入一个拦截器。其实我们也可以手动配置为每个HandlerMapping注入一个拦截器-->
    <!--org.springframework.web.servlet.HandlerInterceptor接口，
      org.springframework.web.servlet.handler.HandlerInterceptorAdapter适配器，-->
    <!--总有一个HandlerMapping是可以找到处理器的，最多也只找到一个处理器，
    所以这个拦截器总会被执行的。起到了总拦截器的作用。-->
    <mvc:interceptors>
        <bean class="com.xiaoxiang.base.interceptor.LoginInterceptor"/>
    </mvc:interceptors>

    <!--对相应的url进行控制 如公用,无需登陆-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/public/*"/>
            <bean class="com.xiaoxiang.base.interceptor.PublicInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--对相应的url进行,控制在模板渲染中加入一些全局变量-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**/*.htm"/>
            <bean class="com.xiaoxiang.base.interceptor.VelocityInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- velocity视图解析器 -->
    <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.velocity.VelocityView"/>
        <property name="cache" value="false"/>
        <!--是否缓存模板-->
        <!--下面如果配置,会出问题-->
        <!--<property name="prefix" value="/template"/>
        <property name="suffix" value=".vm"/>-->
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <!--是否使用spring对宏定义的支持-->
        <property name="exposeRequestAttributes" value="true"/>
        <!--是否开放request属性-->
        <property name="requestContextAttribute" value="rc"/>
        <!--request属性引用名称-->
    </bean>

    <!-- velocity环境配置 -->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <!-- 页面文件的路径,相对于webapp -->
        <property name="resourceLoaderPath" value="/template"/>
        <!-- Velocity属性配置 -->
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <!-- 指定模板引擎进行模板处理的编码 -->
                <prop key="output.encoding">UTF-8</prop>
                <!-- 指定输出流的编码 -->
                <prop key="contentType">text/html;charset=UTF-8</prop>
            </props>
        </property>
    </bean>

    <!-- 对静态资源文件的访问-->
    <!-- 匹配URL  /images/**  的URL被当做静态资源，由Spring读出到内存中再响应http-->
    <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
    <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
    <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>
    <mvc:resources mapping="/html/**" location="/html/" cache-period="31556926"/>

    <!-- 总错误处理-->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView">
            <value>/error/error.vm</value>
        </property>
        <property name="defaultStatusCode">
            <value>500</value>
        </property>
        <property name="warnLogCategory">
            <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
        </property>
    </bean>

    <!--上传相关配置-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置最大上传大小: 1MB -->
        <property name="maxUploadSize" value="1048576"/>
    </bean>

    <!-- 分模块加载-->
    <import resource="area-context.xml"/>
    <import resource="fileupload-context.xml"/>
</beans>
