##显示当前构建的实际POM，包含活动的Profile 并重定向到一个文件，方便查看
mvn help:effective-pom > pom_all.xml
##列出当前构建中活动的Profile（项目的，用户的，全局的）
mvn help:active-profiles
##打印出项目的实际settings, 包括从全局的settings和用户级别settings继承的配置
help:effective-settings
##描述插件的属性。它不需要在项目目录下运行。但是你必须提供你想要描述插件的 groupId 和 artifactId
help:describe
mvn help:describe -Dcmd=package
mvn help:describe -Dcmd=jar:jar
mvn help:describe -Dplugin=help
##在Maven里面， 一个插件目标也被认为是一个 “Mojo”
mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull


##常用命令
mvn clean
mvn package
mvn package -Prelease
mvn install
mvn eclipse:eclipse

mvn archetype:generate -DgroupId -DartifactId -DpackageName archetypeArtifactId (maven-archetype-webapp)
mvn archetype:create -DgroupId -DartifactId -DpackageName
mvn compile
mvn test
mvn eclipse:eclipse
mvn eclipse:clean
mvn package
mvn install
mvn clean
mvn site

mvn -U
mvn -o
mvn -N
mvn -pl 模块名
mvn -ff
mvn -Dxxx=yyy
mvn -Pxxx

mvn -Dmaven.test.skip=true


maven内存不够用
通常是PermSize不够，用下面参数一般可解决问题
MAVEN_OPTS=-Xms256m -Xmx512m -XX:ReservedCodeCacheSize=64m -XX:MaxPermSize=128m

maven tab自动匹配配置(ubuntu)
     *  touch /etc/bash_completion.d/maven2
     *  拷贝备注描述内容到maven2文件

单独编译子模块
    mvn -pl biz/album -am -amd eclipse:eclipse
     解释：
     -pl : 可以指定你需要执行命令的模块，以","分割。
     -am ：如果该模块依赖了同一个大项目下的其他的模块，也一并加入到reactor列表来执行后面的命令。
     -amd 意思是：如果有依赖该模块的其他模块，也一并加入到reactor列表来执行后面的命令

单独编译上层模块
     mvn clean install -N -pl tpsc.client
     -N ：不对该工程下的子模块进行递归处理


maven-surefire-plugin  单元测试，testNG


mvn package
##会调用：
resources:resources
##Resources插件的resources目标绑定到了resources 阶段。这个目标复制src/main/resources下的所有资源和其它任何配置的资源目录，到输出目录。
compiler:compile
##Compiler插件的compile目标绑定到了compile 阶段。这个目标编译src/main/java下的所有源代码和其他任何配置的资源目录，到输出目录。
resources:testResources
##Resources插件的testResources目标绑定到了test-resources 阶段。这个目标复制src/test/resources下的所有资源和其它任何的配置的测试资源目录，到测试输出目录。
compiler:testCompile
##Compiler插件的testCompile目标绑定到了test-compile 阶段。这个目标编译src/test/java下的测试用例和其它任何的配置的测试资源目录，到测试输出目录。
surefire:test
##Surefire插件的test目标绑定到了test 阶段。这个目标运行所有的测试并且创建那些捕捉详细测试结果的输出文件。默认情况下，如果有测试失败，这个目标会终止。一个简单的Maven项目
jar:jar
##Jar插件的jar目标绑定到了package 阶段。这个目标把输出目录打包成JAR文件。
##同义词
mvn resources:resources compiler:compile resources:testResources compiler:testCompile surefire:test jar:jar

##项目的构件安装到本地仓库
mvn install

##生成文档和报告
mvn site
出错：SiteToolException ArtifactNotFoundException The skin does not exist Unable to determine the release version
先下载
http://repo.xxx-inc.com/mvn/external/org/apache/maven/skins/maven-default-skin/1.0/
maven-default-skin-1.0.jar
maven-default-skin-1.0.xml
maven-metadata.xml
然后
Z:\xiaoxiang\m2\repository\org\apache\maven\skins\maven-default-skin
下面的两个文件加入
<version>1.0</version>
  <versioning>
    <latest>1.0</latest>
    <release>1.0</release>
    <versions>
      <version>1.0</version>
    </versions>
    <lastUpdated>20100311012304</lastUpdated>
  </versioning>


##执行某个类的方法 注意，多模块下，要先转到该模块，不能在父模块执行，否则会出错
mvn exec:java -Dexec.mainClass=com.common.util.StringUtil

mvn exec:java -Dexec.mainClass=com.Main -Dexec.args="1 128"

mvnDebug exec:java -Dexec.mainClass=com.Main -Dexec.args="1 128"

mvnDebug exec:java  -Dexec.mainClass="org.eclipse.jetty.start.Main" -Dexec.args="--ini=/home/admin/webapp/jetty_server/conf/start.ini" -Dexec.classpathScope=runtime

mvnDebug install exec:java -Dexec.mainClass=com.supplygoods.screen.SupplyGoodsMain -e
mvnDebug install exec:java -Dexec.mainClass=com.GoodsTest -e


##帮助查看
mvn help:describe -Dplugin=exec -Dfull
##在Maven2中运行单个测试用例并添加JVM参数
mvn -Dtest=TestXXX test
测试调试

mvnDebug -DforkMode=true test -Dtest=com.alisoft.eshop.GoodsTest
mvn -Dmaven.surefire.debug="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE" -Dtest=com.alisoft.eshop.GoodsTest test
##项目的整个依赖树
mvn dependency:tree
##完整的依赖踪迹，包含那些因为冲突或者其它原因而被拒绝引入的构件
mvn install -X

##测试失败，它默认的行为是停止当前的构建修改默认有两种方式
mvn test -Dmaven.test.failure.ignore=true
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
        <testFailureIgnore>true</testFailureIgnore>
    </configuration>
</plugin>

##帮助你发现对于依赖的直接引用
mvn dependency:analyze

##常量
env
project
settings

生命周期阶段描述
validate 验证项目是否正确，以及所有为了完整构建必要的信息是否可用
generate-sources 生成所有需要包含在编译过程中的源代码
process-sources 处理源代码，比如过滤一些值
generate-resources 生成所有需要包含在打包过程中的资源文件
process-resources 复制并处理资源文件至目标目录，准备打包
compile 编译项目的源代码
process-classes 后处理编译生成的文件，例如对Java类进行字节码增强（bytecode enhancement）
generate-test-sources 生成所有包含在测试编译过程中的测试源码
process-test-sources 处理测试源码，比如过滤一些值
generate-test-resources 生成测试需要的资源文件
process-test-resources 复制并处理测试资源文件至测试目标目录
test-compile 编译测试源码至测试目标目录
test 使用合适的单元测试框架运行测试。这些测试应该不需要代码被打包或发布
prepare-package 在真正的打包之前，执行一些准备打包必要的操作。这通常会产生一个包的展开的处理过的版本（将会在Maven 2.1+中实现）
package 将编译好的代码打包成可分发的格式，如JAR，WAR，或者EAR
pre-integration-test 执行一些在集成测试运行之前需要的动作。如建立集成测试需要的环境
integration-test 如果有必要的话，处理包并发布至集成测试可以运行的环境
post-integration-test 执行一些在集成测试运行之后需要的动作。如清理集成测试环境。
verify 执行所有检查，验证包是有效的，符合质量规范
install 安装包至本地仓库，以备本地的其它项目作为依赖使用
deploy 复制最终的包至远程仓库，共享给其它开发人员和项目（通常和一次正式的发布相关）


Deploy
Deploy插件的deploy目标通常绑定到deploy生命周期阶段。该阶段用来将一个构件
部署到远程Maven仓库，当你执行一次发布的时候通常需要更新远程仓库。一次部署
过程可以简单到复制一个文件至另外一个目录，或者复杂到使用公钥通过SCP传送一
个文件。部署设置通常包含远程仓库的证书，并且，这样的部署设置通常不会存储
在pom.xml中。部署设置通常可以在用户单独的~/.m2/settings.xml中找到。到现在为
止，你要知道的是deploy:deploy被绑定到deploy阶段，它会处理传送一个构件至发布仓
库，更新一些可能被此次部署影响的仓库信息

利用maven如何让jetty以debug方式启动
mvnDebug jetty:run-war
mvn jetty:run默认启动的是8080端口，tomcat通常占用这个端口，可以手动修改jetty插件的启动端口，命令如下：
mvnDebug jetty:run -Djetty.port=8081

下载源代码
mvn dependency:sources


开发plugin
http://maven.apache.org/guides/plugin/guide-java-plugin-development.html
http://www.iteye.com/topic/1117477
http://www.iteye.com/topic/348945




