java -XX:+PrintFlagsFinal
jinfo -sysprops 18549
jinfo -flag MaxPermSize 18549
jinfo -flag CMSInitiatingOccupancyFraction 18549


jinfo pid 查看jvm配置信息
jstack ( 查看jvm线程运行状态，是否有死锁现象等等信息) : jstack pid : thread dump
jmap -histo:live  pid| less :堆中活动的对象以及大小
jstat -gcutil  pid  1000 100  : 1000ms统计一次gc情况统计100次；
jmap -heap pid : 查看堆的使用状况信息

通过JMX查看
JMX="-Dcom.sun.management.jmxremote.port=17188 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.20.156.113"
JAVA_OPTIONS="$JAVA_OPTS $JMX"

$JAVA_HOME/bin/jvisualvm.exe 可视化查看vm状况
jdk7后有些功能更强
最好是直接安装,不使用java默认的
http://visualvm.java.net/download.html
http://kenai.com/projects/btrace/downloads/directory/releases/release-1.2.1/visualvm

1.java性能分析命令

     a)jps

            显示当前用户的java进程列表。

            xiangtao@xiangtao:~$ jps
            2438 Jps
            2426 EngineServer

    b)jinfo

           输出给定java进程所有的配置信息。包括java系统属性和jvm参数等。

           jinfo [ option ] pid

    c)jmap

            。查看各个代的内存状况：jmap -heap [pid]  jvm堆的配置信息，各代的使用情况

            。对象的内存占用状况：jmap -histo [pid]，各个对象占用的内存大小，实例个数

            。导出整个JVM中的内存信息： jmap -dump:format=b,file=<filename> [pid],  然后可以用jhat，mat等工具分析内存详细信息。

                       jdk1.5:  jmap -heap:format=b [pid]  会产生一个heap.bin的heapdump文件。时间比较长。

            jmap使用的时候jvm是处在假死状态的，只能在服务瘫痪的时候为了解决问题来使用，否则会造成服务中断。

            解决实际问题：主要用于监控内存泄露时候对象占用的字节数。

    d)jhat--jdk6自带，根据dump的文件分析堆内存占用状况，引用关系。

            jhat -J-Xmx1024M [file]

            Reading from test.bin...
            Dump file created Tue Aug 31 20:30:53 CST 2010
            Snapshot read, resolving...
            Resolving 412838 objects...
            Chasing references, expect 82 dots..................................................................................
            Eliminating duplicate references..................................................................................
            Snapshot resolved.
            Started HTTP server on port 7000
            Server is ready.

            然后通过http://ip:7000查看，页面最下端的Other Queries>>>Show heap histogram查看对象实例个数大小及被谁引用或被谁创建。

            缺点是：分析大的dump文件，速度很慢。

     e)jstack

            jvm中线程运行状况，包括线程等待，死锁等。

            解决实际问题：主要用于线程死锁的监控。

    f)jstat--统计分析java运行状况：编译状况，class加载，GC状况。

            常用分析GC状况命令：jstat -gcutil [pid] [interval]

            解决实际问题：主要用于监控jvm的gc使用情况。

            xiangtao@xiangtao:$ jstat -gcutil 11948 1000
              S0         S1     E      O      P         YGC     YGCT    FGC    FGCT     GCT
              0.00   0.00  61.36   0.77  49.67      2        0.091     1        0.086        0.177
              0.00   0.00  61.36   0.77  49.67      2        0.091     1        0.086        0.177
              0.00   0.00  61.36   0.77  49.67      2        0.091     1        0.086        0.177

              S0  — Heap上的 Survivor space 0 区已使用空间的百分比
              S1  — Heap上的 Survivor space 1 区已使用空间的百分比
              E   — Heap上的 Eden space 区已使用空间的百分比
              O   — Heap上的 Old space 区已使用空间的百分比
              P   — Perm space 区已使用空间的百分比
              YGC — 从应用程序启动到采样时发生 Young GC 的次数
              YGCT- 从应用程序启动到采样时 Young GC 所用的时间(单位秒)
              FGC — 从应用程序启动到采样时发生 Full GC 的次数
              FGCT- 从应用程序启动到采样时 Full GC 所用的时间(单位秒)
              GCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)

        jstat -gc [pid] [interval] ，更全面，S0C中的C代表占用空间，S0U中的U代表利用率。
        xiangtao@xiangtao:$ jstat -gc 11948 1000
         S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU        YGC     YGCT    FGC     FGCT     GCT
        128.0  128.0   0.0    16.0  349248.0 310965.4  699072.0   12658.9   38784.0 19386.0    741    0.831     1      0.086    0.917
        128.0  128.0   0.0    16.0  349248.0 310965.4  699072.0   12658.9   38784.0 19386.0    741    0.831     1      0.086    0.917
        128.0  128.0   0.0    16.0  349248.0 310965.4  699072.0   12658.9   38784.0 19386.0    741    0.831     1      0.086    0.917

2.性能参数

    a) java

             -verbose:gc
                该参数用来监视虚拟机内存回收的情况。
                在虚拟机发生内存回收时在输出设备显示信息，格式如下：

                [Full GC 168K->97K(1984K)， 0.0253873 secs]

                箭头前后的数据168K和97K分别表示垃圾收集GC前后所有存活对象使用的内存容量，说明有168K-97K=71K的对象容量被回收，括号内的数据1984K为堆内存的总容量，收集所需要的时间是0.0253873秒                          -Xloggc:<file>
                将虚拟机每次垃圾回收的信息写到日志文件中，文件名由file指定，文件格式是平文件，内容和-verbose:gc输出内容相同。

             -Xms<size>

                设置虚拟机可用内存堆的初始大小，缺省单位为字节，该大小为1024的整数倍并且要大于1MB，可用k(K)或m(M)为单位来设置较大的内存数。初始堆大小为2MB。例如：-Xms6400K，-Xms256M

             -Xmx<size>

                设置虚拟机内存堆的最大可用大小，缺省单位为字节。该值必须为1024整数倍，并且要大于2MB。可用k(K)或m(M)为单位来设置较大的内存数。缺省堆最大值为64MB。例如：-Xmx81920K，-Xmx80M

                当应用程序申请了大内存运行时虚拟机抛出java.lang.OutOfMemoryError: Java heap space错误，就需要使用-Xmx

             -Xss<size>

                设置线程栈的大小，缺省单位为字节。与-Xmx类似，也可用K或M来设置较大的值。通常操作系统分配给线程栈的缺省大小为1MB。

                另外也可在java中创建线程对象时设置栈的大小，构造函数原型为Thread(ThreadGroup group, Runnable target, String name, long stackSize)。

    b）其它性能选项

选项与默认值
默认值与限制
描述
-XX:MaxHeapFreeRatio=70	 70
GC后，如果发现空闲堆内存占到整个预估上限值的70%，则收缩预估上限值。
什么是预估上限值？
JVM在启动时，会申请最大值（-Xmx指定的数值）的地址空间，但其中绝大部分空间不会被立即分配(virtual)。
它们会一直保留着，直到运行过程中，JVM发现实际占用接近已分配上限值时，才从virtual里再分配掉一部分内存。
这里提到的已分配上限值，也可以叫做预估上限值。

引入预估上限值的好处是，可以有效地控制堆的大小。堆越小，GC效率越高嘛。
注意：预估上限值的大小一定小于或等于最大值。
-XX:MaxNewSize=size	 1.3.1 Sparc: 32m
1.3.1 x86: 2.5m
新生代占整个堆内存的最大值。
-XX:MaxPermSize=64m	 5.0以后: 64 bit VMs会增大预设值的30%
1.4 amd64: 96m
1.3.1 -client: 32m
其他默认 64m
Perm（俗称方法区）占整个堆内存的最大值。
-XX:MinHeapFreeRatio=40	 40
GC后，如果发现空闲堆内存占到整个预估上限值的40%，则增大上限值。
(什么是预估上限值？见 -XX:MaxHeapFreeRatio 处的描述)
关联选项：
-XX:MaxHeapFreeRatio=70
-XX:NewRatio=2	 Sparc -client: 8
x86 -server: 8
x86 -client: 12
-client: 4 (1.3)
8 (1.3.1+)
x86: 12
其他默认 2
新生代和年老代的堆内存占用比例。
例如2表示新生代占年老代的1/2，占整个堆内存的1/3。
-XX:NewSize=2.125m	 5.0以后: 64 bit Vms 会增大预设值的30%
x86: 1m
x86, 5.0以后: 640k
其他默认 2.125m
新生代预估上限的默认值。(什么是预估上限值？见 -XX:MaxHeapFreeRatio 处的描述)
-XX:SurvivorRatio=8	 Solaris amd64: 6
Sparc in 1.3.1: 25
Solaris platforms 5.0以前: 32
其他默认 8
Eden与Survivor的占用比例。例如8表示，一个survivor区占用 1/8 的Eden内存，即1/10的新生代内存，为什么不是1/9？ 因为我们的新生代有2个survivor，即S1和S22。所以survivor总共是占用新生代内存的 2/10，Eden与新生代的占比则为 8/10。
-XX:TargetSurvivorRatio=50	 50
实际使用的survivor空间大小占比。默认是50%，最高90%。
-XX:ThreadStackSize=512	 Sparc: 512
Solaris x86: 320 (5.0以前 256)
Sparc 64 bit: 1024
Linux amd64: 1024 (5.0 以前 0)
其他默认 512.
线程堆栈大小


=============================问题=======================================

1. -Xmn<size> 新生代的大小。与-XX:ThreadStackSize的区别？

2. jmap -heap:format=b 26163的作用？很慢？

=============================知识拓展===========================================

1.线程状态及关系？

2.参数设置及调优？


jstatd
启动jvm监控服务。它是一个基于rmi的应用，向远程机器提供本机jvm应用程序的信息。默认端口1099。
实例：jstatd -J-Djava.security.policy=my.policy

my.policy文件需要自己建立，内如如下：
grant codebase "file:$JAVA_HOME/lib/tools.jar" {
 permission java.security.AllPermission;
};
这是安全策略文件，因为jdk对jvm做了jaas的安全检测，所以我们必须设置一些策略，使得jstatd被允许作网络操作

jps
列出所有的jvm实例
实例：
jps
列出本机所有的jvm实例

jps 192.168.0.77
列出远程服务器192.168.0.77机器所有的jvm实例，采用rmi协议，默认连接端口为1099
（前提是远程服务器提供jstatd服务）

输出内容如下：
jones@jones:~/data/ebook/java/j2se/jdk_gc$ jps
6286 Jps
6174  Jstat

jconsole
一个图形化界面，可以观察到java进程的gc，class，内存等信息。虽然比较直观，但是个人还是比较倾向于使用jstat命令（在最后一部分会对jstat作详细的介绍）。

jinfo（linux下特有）
观察运行中的java程序的运行环境参数：参数包括Java System属性和JVM命令行参数
实例：jinfo 2083
其中2083就是java进程id号，可以用jps得到这个id号。
输出内容太多了，不在这里一一列举，大家可以自己尝试这个命令。

jstack（linux下特有）
可以观察到jvm中当前所有线程的运行情况和线程当前状态
jstack 2083
输出内容如下：




jmap（linux下特有，也是很常用的一个命令）
观察运行中的jvm物理内存的占用情况。
参数如下：
-heap：打印jvm heap的情况
-histo：打印jvm heap的直方图。其输出信息包括类名，对象数量，对象占用大小。
-histo：live ：同上，但是只答应存活对象的情况
-permstat：打印permanent generation heap情况

命令使用：
jmap -heap 2083
可以观察到New Generation（Eden Space，From Space，To Space）,tenured generation,Perm Generation的内存使用情况
输出内容：




jmap -histo 2083 ｜ jmap -histo:live 2083
可以观察heap中所有对象的情况（heap中所有生存的对象的情况）。包括对象数量和所占空间大小。
输出内容：



写个脚本，可以很快把占用heap最大的对象找出来，对付内存泄漏特别有效。

jstat
最后要重点介绍下这个命令。
这是jdk命令中比较重要，也是相当实用的一个命令，可以观察到classloader，compiler，gc相关信息
具体参数如下：
-class：统计class loader行为信息
-compile：统计编译行为信息
-gc：统计jdk gc时heap信息
-gccapacity：统计不同的generations（不知道怎么翻译好，包括新生区，老年区，permanent区）相应的heap容量情况
-gccause：统计gc的情况，（同-gcutil）和引起gc的事件
-gcnew：统计gc时，新生代的情况
-gcnewcapacity：统计gc时，新生代heap容量
-gcold：统计gc时，老年区的情况
-gcoldcapacity：统计gc时，老年区heap容量
-gcpermcapacity：统计gc时，permanent区heap容量
-gcutil：统计gc时，heap情况
-printcompilation：不知道干什么的，一直没用过。

一般比较常用的几个参数是：
jstat -class 2083 1000 10 （每隔1秒监控一次，一共做10次）
输出内容含义如下：
Loaded	Number of classes loaded.
Bytes	Number of Kbytes loaded.
Unloaded	Number of classes unloaded.
Bytes	Number of Kbytes unloaded.
Time	Time spent performing class load and unload operations.


jstat -gc 2083 2000 20（每隔2秒监控一次，共做10）
输出内容含义如下：
S0C	Current survivor（存活的） space 0 capacity (KB).
EC	Current eden space capacity (KB).
EU	Eden space utilization (KB).
OC	Current old space capacity (KB).
OU	Old space utilization (KB).
PC	Current permanent space capacity (KB).
PU	Permanent space utilization (KB).
YGC	Number of young generation GC Events.
YGCT	Young generation garbage collection time.
FGC	Number of full GC events.
FGCT	Full garbage collection time.
GCT	Total garbage collection time.


















输出内容：




 监控内存使用情况 参数 （查看内存溢出相对有用）
jstat -gccause 2083 5000 （每隔5秒监控一次）
输出内容含义如下：


S0	Survivor space 0 utilization as a percentage of the space's current capacity.
S1	Survivor space 1 utilization as a percentage of the space's current capacity.
E	Eden space utilization as a percentage of the space's current capacity.
O	Old space utilization as a percentage of the space's current capacity.
P	Permanent space utilization as a percentage of the space's current capacity.
YGC	Number of young generation GC events.
YGCT	Young generation garbage collection time.
FGC	Number of full GC events.
FGCT	Full garbage collection time.
GCT	Total garbage collection time.
LGCC	Cause of last Garbage Collection.
GCC	Cause of current Garbage Collection.

如果能熟练运用这些命令，尤其是在linux下，那么完全可以代替jprofile等监控工具了，谁让它收费呢。呵呵。
用命令的好处就是速度快，并且辅助于其他命令，比如grep gawk sed等，可以组装多种符合自己需求的工具。


看看c堆栈上的allocate的状况，想从此来关联到java的线程堆栈
pstack [pid] | grep ‘allocate’




参考:
http://freewind.me/blog/20111023/479.html
